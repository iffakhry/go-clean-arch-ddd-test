// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	users "be9/restclean/features/users"

	mock "github.com/stretchr/testify/mock"
)

// UserBusiness is an autogenerated mock type for the Business type
type UserBusiness struct {
	mock.Mock
}

// GetAllData provides a mock function with given fields: limit, offset
func (_m *UserBusiness) GetAllData(limit int, offset int) ([]users.Core, error) {
	ret := _m.Called(limit, offset)

	var r0 []users.Core
	if rf, ok := ret.Get(0).(func(int, int) []users.Core); ok {
		r0 = rf(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]users.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertData provides a mock function with given fields: data
func (_m *UserBusiness) InsertData(data users.Core) (int, error) {
	ret := _m.Called(data)

	var r0 int
	if rf, ok := ret.Get(0).(func(users.Core) int); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(users.Core) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserBusiness interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserBusiness creates a new instance of UserBusiness. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserBusiness(t mockConstructorTestingTNewUserBusiness) *UserBusiness {
	mock := &UserBusiness{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
